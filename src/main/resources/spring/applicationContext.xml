<?xml version="1.0" encoding="UTF-8"?>

<!-- Application context definition. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/jdbc
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"

	default-autowire="byName">


	<!-- 处理@responseBody注解引起的中文乱码问题 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
				<!--<bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />-->
				<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
			</list>
		</property>
	</bean>

<!-- 	<context:property-placeholder location="classpath:/config/*.properties"/>  -->
	
	<context:component-scan base-package="com.example.demo" />

	<!-- 支持异步方法执行 -->
	<mvc:annotation-driven />

	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/mobile/**"/>
			<bean class="com.soa.framework.auth.MobileAuthInterceptor">
				<property name="noAuthUrl" value="/mobile/"></property>
				<property name="acctSessionName" value="macctAuth"></property>
			</bean>
		</mvc:interceptor> -->
		
		<!-- <mvc:interceptor>
			<mvc:mapping path="/web/**"/>
			<bean class="com.soa.framework.auth.AuthInterceptor">
				<property name="noAuthUrl" value="/web/"></property>
				<property name="acctSessionName" value="acctAuth"></property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors> -->
	<!-- 防止下单页重复提交，pay-barcode -->
	<!-- <mvc:interceptors>  
    	<mvc:interceptor>  
            <mvc:mapping path="/web/order/**"/>  
            <bean class="com.soa.filter.RepeatTokenInterceptor"/>  
        </mvc:interceptor>  
    </mvc:interceptors> -->


	<!--ThredPoolTaskExcutor的处理流程：
		当池子大小小于corePoolSize，就新建线程，并处理请求
		当池子大小等于corePoolSize，把请求放入workQueue中，池子里的空闲线程就去workQueue中取任务并处理
		当workQueue放不下任务时，就新建线程入池，并处理请求，如果池子大小撑到了maximumPoolSize，就用RejectedExecutionHandler来做拒绝处理
		当池子的线程数大于corePoolSize时，多余的线程会等待keepAliveTime长时间，如果无请求可处理就自行销毁
		其会优先创建  CorePoolSiz 线程， 当继续增加线程时，先放入Queue中，当 CorePoolSiz  和 Queue 都满的时候，就增加创建新线程，
		当线程达到MaxPoolSize的时候，就会抛出错 误 org.springframework.core.task.TaskRejectedException
		另外MaxPoolSize的设定如果比系统支持的线程数还要大时，会抛出java.lang.OutOfMemoryError: unable to create new native thread 异常。
	-->
    <!-- 线程池 -->
    <!--<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">-->
		<!--&lt;!&ndash;corePoolSize： 线程池维护线程的最少数量 &ndash;&gt;-->
        <!--<property name="corePoolSize" value="${threadpool.corePoolSize}" />-->
		<!--&lt;!&ndash;keepAliveSeconds 线程池维护线程所允许的空闲时间&ndash;&gt;-->
        <!--<property name="keepAliveSeconds" value="${threadpool.keepAliveSeconds}" />-->
		<!--&lt;!&ndash;maxPoolSize 线程池维护线程的最大数量 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${threadpool.maxPoolSize}" />-->
		<!--&lt;!&ndash;queueCapacity 线程池所使用的缓冲队列&ndash;&gt;-->
        <!--<property name="queueCapacity" value="${threadpool.queueCapacity}" />-->
    <!--</bean>-->

    <!--&lt;!&ndash;请在bean xsd中配置task&ndash;&gt;-->
    <!--<task:annotation-driven executor="taskExecutor" />-->

	<!--freemarker配置信息 -->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="classpath:/templates/" />
	</bean>
	
</beans>